{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.96e16f4e72962391113a.hot-update.js","sources":["webpack:///./layouts/Layout.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../store/actions/index\";\r\nimport { getStaticCategories } from \"../lib/categories\";\r\nimport Head from \"next/head\";\r\nimport { AuthModalContext } from \"../store\";\r\nimport Router from \"next/router\";\r\nimport { useForm } from \"../hooks/\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Form, Formik, useFormik } from \"formik\";\r\nimport { string, object } from \"yup\";\r\nimport { AuthModal, NavItems, Navbar, Footer, Search } from \"../components/\";\r\n\r\nconst Layout = ({ children, cartCount, onAuth, onLogout, isAuthorized, name }) => {\r\n\tconst [ isSignUp, setIsSignUp ] = useState(true);\r\n\tconst formikRegister = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tname: \"\",\r\n\t\t\temail: \"\",\r\n\t\t\tphone: \"\",\r\n\t\t\tfPassword: \"\",\r\n\t\t\tsPassword: \"\"\r\n\t\t},\r\n\t\tvalidationSchema: object({\r\n\t\t\tname: string().min(2).required(),\r\n\t\t\temail: string().email().min(4).required(),\r\n\t\t\tphone: string().min(9).max(9).required(),\r\n\t\t\tfPassword: string().min(6).max(20).required(),\r\n\t\t\tsPassword: string().min(6).max(20).required()\r\n\t\t}),\r\n\t\tonSubmit: values => {\r\n\t\t\tonAuth(values.name, values.email, values.phone, values.fPassword, isSignUp);\r\n\t\t}\r\n\t});\r\n\tconst formikLogin = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temailPhone: \"\",\r\n\t\t\tpassword: \"\",\r\n\t\t\tcheckbox: \"\"\r\n\t\t},\r\n\t\tvalidationSchema: object({\r\n\t\t\temailPhone: string().min(2).required(),\r\n\t\t\tpassword: string().email().min(4).required(),\r\n\t\t\tcheckbox: string().min(9).max(9).required()\r\n\t\t}),\r\n\t\tonSubmit: values => {\r\n\t\t\tonAuth(null, values.emailPhone, null, values.password, isSignUp);\r\n\t\t}\r\n\t});\r\n\tconst authModalContext = useContext(AuthModalContext);\r\n\tconst checkboxControl = useForm();\r\n\tconst searchControl = useForm();\r\n\r\n\tconst modeHandler = mode => {\r\n\t\tsetIsSignUp(mode);\r\n\t};\r\n\tconst authHandler = event => {\r\n\t\tevent.preventDefault();\r\n\t\tonAuth(\r\n\t\t\tnameControl.value,\r\n\t\t\tisSignUp ? emailControl.value : emailPhoneControl.value,\r\n\t\t\tphoneControl.value,\r\n\t\t\tisSignUp ? fPasswordControl.value : passwordControl.value,\r\n\t\t\tisSignUp\r\n\t\t);\r\n\t\tconsole.log(\"Auth submitted!\");\r\n\t};\r\n\tconst onSearch = event => {\r\n\t\tevent.preventDefault();\r\n\t\tsearchControl.clear();\r\n\t\tRouter.push(`/search?q=${encodeURI(searchControl.value)}`);\r\n\t};\r\n\tconst search = <Search control={searchControl} onSearch={onSearch} />;\r\n\t// Right side of navbar with cart, login/logout\r\n\tconst navItems = (\r\n\t\t<NavItems\r\n\t\t\tname={name}\r\n\t\t\tauthModalShow={authModalContext.authModal.onShow}\r\n\t\t\tcartCount={cartCount}\r\n\t\t\tisAuthorized={isAuthorized}\r\n\t\t\tonLogout={onLogout}\r\n\t\t/>\r\n\t);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<AuthModal\r\n\t\t\t\tlogin={formikLogin}\r\n\t\t\t\tregister={formikRegister}\r\n\t\t\t\tisSignUp={isSignUp}\r\n\t\t\t\tmodal={authModalContext.authModal}\r\n\t\t\t\tsubmitted={authHandler}\r\n\t\t\t\tmodeHandler={modeHandler}\r\n\t\t\t\tcheckboxControl={checkboxControl}\r\n\t\t\t/>\r\n\t\t\t<Head>\r\n\t\t\t\t<title>InStore | Библиотека книг и видеоуроков</title>\r\n\t\t\t</Head>\r\n\t\t\t<Navbar\r\n\t\t\t\tname={name}\r\n\t\t\t\tisAuthorized={isAuthorized}\r\n\t\t\t\tcartCount={cartCount}\r\n\t\t\t\tsearch={search}\r\n\t\t\t\tbooksCategories={getStaticCategories()}\r\n\t\t\t\tnavItems={navItems}\r\n\t\t\t/>\r\n\t\t\t<main className=\"pt-4 page\">\r\n\t\t\t\t<Container>{children}</Container>\r\n\t\t\t</main>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\t);\r\n};\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tisAuthorized: state.auth.token !== null,\r\n\t\tname: state.auth.name\r\n\t};\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonAuth: (name, email, phone, password, isSignup) =>\r\n\t\t\tdispatch(actions.auth(name, email, phone, password, isSignup)),\r\n\t\tonLogout: () => dispatch(actions.logout())\r\n\t};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;;;;A","sourceRoot":""}